const { chromium } = require('playwright');

async function scrapeWebsite(url) {
  const browser = await chromium.launch({headless: true}); // Inicializa o navegador Chromium
  const context = await browser.newContext(); // Cria um novo contexto de navega√ß√£o
  const page = await context.newPage(); // Cria uma nova p√°gina dentro do contexto
  await page.goto(url , {waitUntil: 'domcontentloaded'}); // Navega para a URL fornecida
  await page.waitForTimeout(1500); // Aguarda que os conteudos no cardapio sejam inicializados (se existirem)
  await page.waitForSelector('.cardapio'); // Aguarda a exist√™ncia do seletor '.cardapio' na p√°gina

  const hasCardapio = await page.$eval('.panel-heading.custom-panel__heading', (element) => {
    // Verifica se o texto "N√£o h√° card√°pio cadastrado para exibi√ß√£o no momento." est√° presente no elemento '.panel-heading.custom-panel__heading'
    return element.textContent.includes('N√£o h√° card√°pio cadastrado para exibi√ß√£o no momento.');
  }).catch(() => false);

  if (hasCardapio) {
    await browser.close(); // Fecha o navegador
    return 'N√£o h√° card√°pio'; // Retorna a string indicando a aus√™ncia de card√°pio
  }

  const cardapioElement = await page.$('.cardapio'); // Localiza o elemento '.cardapio' na p√°gina
  const dayWeek = await page.$('.date-slider-dayweek'); // Localiza o dia da semana no cardapio
  if (dayWeek && cardapioElement) {

    const screenshot = await cardapioElement.screenshot({ fullPage: true }); // Tira uma captura de tela do elemento

    await browser.close(); // Fecha o navegador

    return screenshot; // Retorna a captura de tela como resultado
  } else {
    await browser.close(); // Fecha o navegador
    return 'N√£o h√° card√°pio'; // Retorna a string indicando a aus√™ncia de card√°pio
  }
}

async function scrapeHorarios(url) {
  const browser = await chromium.launch({headless: true}); // Inicializa o navegador Chromium
  const context = await browser.newContext(); // Cria um novo contexto de navega√ß√£o
  const page = await context.newPage(); // Cria uma nova p√°gina dentro do contexto
  
  try {
    await page.goto(url, {waitUntil: 'domcontentloaded'}); // Navega para a URL fornecida
    await page.waitForTimeout(2000); // Aguarda que a p√°gina carregue completamente
    
    // Busca o elemento com id ui-id-4
    const horariosElement = await page.$('#ui-id-4');
    if (horariosElement) {
      const horariosText = await horariosElement.textContent();
      await browser.close();
      return horariosText.trim();
    } else {
      await browser.close();
      return 'Hor√°rios n√£o encontrados';
    }
  } catch (error) {
    await browser.close();
    console.error('Erro ao buscar hor√°rios:', error);
    return 'Erro ao buscar hor√°rios';
  }
}

module.exports = async (ctx) => {
  const message = await ctx.reply('Por favor, aguarde breves momentos enquanto provemos a ti o distinto card√°pio...');

  try {
    const urlCC = 'https://www.furg.br/?view=category&id=231';
    const resultCC = await scrapeWebsite(urlCC); // Executa o scraping para a primeira URL
    const captionCC = `[üîóRU CC](${urlCC})`;

    const urlLago = 'https://www.furg.br/?view=category&id=233';
    const resultLago = await scrapeWebsite(urlLago); // Executa o scraping para a segunda URL
    const captionLago = `[üîóRU LAGO](${urlLago})`;

    if (resultCC === 'N√£o h√° card√°pio' && resultLago === 'N√£o h√° card√°pio') {
      // Se ambos os resultados indicarem aus√™ncia de card√°pio
      await ctx.reply(`N√£o h√° card√°pio cadastrado nos RUs neste momento, tente novamente mais tarde.`);
    } else if (resultLago === 'N√£o h√° card√°pio') {
      // Se apenas o resultado2 indicar aus√™ncia de card√°pio
      await ctx.replyWithPhoto({ source: resultCC }, { caption: `N√£o h√° card√°pio cadastrado no ${captionLago} neste momento, tente novamente mais tarde.`, parse_mode: 'Markdown' });
    } else if (resultCC === 'N√£o h√° card√°pio') {
      // Se apenas o resultado1 indicar aus√™ncia de card√°pio
      await ctx.replyWithPhoto({ source: resultLago }, { caption: `N√£o h√° card√°pio cadastrado no ${captionCC} neste momento, tente novamente mais tarde.`, parse_mode: 'Markdown' });
    } else {
      // Se ambos os resultados contiverem capturas de tela v√°lidas
      await ctx.replyWithPhoto({ source: resultCC }, { caption: `Para mais informa√ß√µes acesse: ${captionCC}`, parse_mode: 'Markdown' });
      await ctx.replyWithPhoto({ source: resultLago }, { caption: `Para mais informa√ß√µes acesse: ${captionLago}`, parse_mode: 'Markdown' });
    }

    // Pergunta sobre os hor√°rios com link para comando
    await ctx.reply('Gostaria de saber os hor√°rios de funcionamento dos RUs?\n\nüí° Use o comando /horarios para ver os hor√°rios!');
    
    await ctx.deleteMessage(message.message_id); // Deleta a mensagem anterior

  } catch (error) {
    await ctx.deleteMessage(message.message_id);
    console.error('Ocorreu um erro durante o web scraping:', error);
    await ctx.reply('Desculpe, ocorreu um erro durante o web scraping.'); // Retorna uma mensagem de erro em caso de exce√ß√£o
  }
};

// Fun√ß√£o para formatar o texto dos hor√°rios
function formatarHorarios(textoOriginal) {
  if (!textoOriginal || textoOriginal.trim() === '') {
    return 'Hor√°rios n√£o dispon√≠veis';
  }

  let textoFormatado = textoOriginal;
  
  // Adiciona emoticons e quebras de linha para cada refei√ß√£o
  // Caf√© da manh√£ - padr√µes mais amplos
  textoFormatado = textoFormatado.replace(/(caf√©\s*da\s*manh√£|cafe\s*da\s*manha|breakfast|caf√©|cafe)/gi, '\n\nüåÖ **Caf√© da Manh√£**');
  
  // Almo√ßo - padr√µes mais amplos
  textoFormatado = textoFormatado.replace(/(almo√ßo|almoco|lunch)/gi, '\n\nüçΩÔ∏è **Almo√ßo**');
  
  // Jantar - padr√µes mais amplos
  textoFormatado = textoFormatado.replace(/(jantar|janta|dinner)/gi, '\n\nüåô **Jantar**');
  
  // Lanche/merenda se existir
  textoFormatado = textoFormatado.replace(/(lanche|merenda|snack)/gi, '\n\nü•™ **Lanche**');

  // Adiciona quebra de linha antes de "s√°bado" (ou "sabado" sem acento)
  textoFormatado = textoFormatado.replace(/(\s*)(s[√°a]bado)/gi, '\n$2');

  // Remove quebras de linha triplas ou mais
  textoFormatado = textoFormatado.replace(/\n{3,}/g, '\n\n');
  
  // Remove quebras de linha no in√≠cio
  textoFormatado = textoFormatado.replace(/^\s*\n+/, '');
  
  // Limpa espa√ßos em branco extras
  textoFormatado = textoFormatado.trim();
  
  return textoFormatado;
}

// Fun√ß√£o separada para buscar e exibir hor√°rios
module.exports.horarios = async (ctx) => {
  const message = await ctx.reply('Buscando hor√°rios de funcionamento dos RUs...');
  
  try {
    // Busca os hor√°rios usando uma das URLs (tanto CC quanto Lago funcionam)
    const urlCC = 'https://www.furg.br/?view=category&id=231';
    const horarios = await scrapeHorarios(urlCC);
    
    if (horarios && horarios !== 'Hor√°rios n√£o encontrados' && horarios !== 'Erro ao buscar hor√°rios') {
      // Formata o texto dos hor√°rios
      const horariosFormatados = formatarHorarios(horarios);
      await ctx.reply(`*Hor√°rios de Funcionamento dos RUs:*\n${horariosFormatados}`, { parse_mode: 'Markdown' });
    } else {
      await ctx.reply('N√£o foi poss√≠vel obter os hor√°rios de funcionamento no momento. Tente novamente mais tarde.');
    }
    
    await ctx.deleteMessage(message.message_id);
  } catch (error) {
    await ctx.deleteMessage(message.message_id);
    console.error('Erro ao buscar hor√°rios:', error);
    await ctx.reply('Ocorreu um erro ao buscar os hor√°rios. Tente novamente mais tarde.');
  }
};